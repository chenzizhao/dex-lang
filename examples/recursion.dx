' Recursive sum: sum up a possibly-infinite tuple of integers (1,(2,(3,...)))

A = Int
B = Int
def base' (x:A) (y:A) : B = x+y
def recurr' ((t,y):(A&A&A&A&A)) : B = base' t $ recurr' y

interface Recur ab b
    recur : ab->b

instance [Add a] Recur (a&a) a
    recur = \(t,s):(a&a). t + s

%passes
instance [Recur b] Recur (a&b) b
    recur = \(t,y):(a&b). t + recur y
