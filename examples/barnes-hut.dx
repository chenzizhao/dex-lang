
' ### Barnes-Hut algorithm for the N body problem
https://jheer.github.io/barnes-hut/

NodeId = Int
BodyInd = Fin 10

data Node a =
  Branch lNode:(Maybe NodeId) rNode:(Maybe NodeId) pNode:NodeId 
  Leaf   v:a    pNode:NodeId

def Tree (a:Type) : Type = List (Node a)

def Vec (d:Int) : Type = (Fin d)=>Float

Body = {
  ind:BodyInd -- used to access static property e.g. mass
& pos:Vec 3
& vel:Vec 3
& nodeId:NodeId
}

-- todo: use actual data
[k1,k2] = splitKey (newKey 0)
initPos : BodyInd=>Vec 3 = arb k1
initVel : BodyInd=>Vec 3 = arb k2
masses  : BodyInd=>Float = one
bodies  : BodyInd=>Body  = for i.
  { ind=i, pos=initPos.i, vel=initVel.i, nodeId=(-1) }

' #### Step 1 Build the tree

-- todo: pre-allocate, and expand when needed
-- todo: leaf value could be BodyInd or Body

def buildTree (bodies:BodyInd=>Body) : Tree Body = 
  initTree : Tree Body = AsList _ []
  yieldState initTree \tls.
    for i:BodyInd.
      body:Body = bodies.i
      pNode = 0
      leaf:Node Body = Leaf body pNode
      append tls leaf
      ()

:p buildTree bodies

' #### Step 2 Update center of mass for each node

' #### Step 3 Estimate force on each body

' #### Step 4 Update pos and vel of each body, on this time step

' #### Evolve over time steps 
