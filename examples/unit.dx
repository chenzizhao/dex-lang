' ### [Type safe dimensional analysis in Haskell](https://www.stephanboyer.com/post/131/type-safe-dimensional-analysis-in-haskell) by Stepan Boyer (implemented in Dex) 

' The basics

-- wrapper type around Float to track of the unit
data BaseQuantity a = 
    MkBaseQuantity Float
DimensionlessQuantity = BaseQuantity Unit

Quotient = \a b. b->a -- a/b
Inverse = Quotient DimensionlessQuantity
Product = \a b. Quotient a (Inverse b)
Square  = \a. Product a a

interface Quantity q
    construct : Float -> q
    destruct  : q -> Float

instance Quantity (BaseQuantity a)
    construct = MkBaseQuantity
    destruct  = \(MkBaseQuantity x). x

instance [Quantity q, Quantity r] Quantity (Quotient r q)
    construct = \x:Float. \y. construct (x*(destruct y))
    destruct  = \x:(Quotient r q). destruct (x (construct 1.0))

def quotientAxiom [Quantity a, Quantity b, Quantity c] : 
    (Quotient a (Quotient b c)) -> (Quotient c (Quotient b a))
    = construct <<< destruct

' Some helpful functions

instance [Quantity a] Add a
    add = \x y. construct $ (destruct x) + (destruct y)
    sub = \x y. construct $ (destruct x) - (destruct y)
    zero = construct 0.

def mul' [Quantity a, Quantity b] (x:a) (y:b) : Product a b = 
    \z. construct $ destruct (z y) * destruct x

def one' [Quantity a] : a = construct 1.

def divide' [Quantity a, Quantity b] (x:a) (y:b) : Quotient a b = 
    \z. construct $ (destruct z) * (destruct x) / (destruct y)

def (+!) [Quantity a] : a->a->a = add
def (-!) [Quantity a] : a->a->a = sub
def (*!) [Quantity a, Quantity b] : a->b->(Product a b) = mul'
def (/!) [Quantity a, Quantity b] : a->b->(Quotient a b) = divide'

instance [Quantity a] Eq a
    (==) = \x y. (destruct x) == (destruct y)

instance [Quantity a] Ord a
    (>) = \x y. (destruct x) > (destruct y)
    (<) = \x y. (destruct x) < (destruct y)

' ### Examples

data Meter = MkMeter -- dummy constructors
data Kilogram = MkKilogram
data Second = MkSecond

Length = BaseQuantity Meter
Mass = BaseQuantity Kilogram
Time = BaseQuantity Second
Area = Square Length
Velocity = Quotient Length Time

-- todo impl. show for nicer msgs
:p Length
:p Velocity

' Example 1

width  : Length = construct 1.5
height : Length = construct 2.5
area   : Area   = width *! height
-- :p area
:p (destruct area)
:t area

mass   : Mass   = construct 150.
area2  : Area   = width *! mass -- expect compile time error

' Example 2

velocity : Velocity = construct 30.    -- m/s
duration : Time     = construct 5000.  -- s
distance : Length   = velocity duration-- m
-- distance : Length   = duration velocity-- m -- todo breaks
:p (destruct distance)
:t distance
-- (m/s) * (s) = (m), cancel the denominator with function application
-- two ways to multiply

' Example 3

def calculateDuration (dist: Length) (vel: Velocity) : Time = 
    (quotientAxiom (dist /! vel)) id

fasterVelocity : Velocity = construct 40.
shorterDuration: Time = calculateDuration distance fasterVelocity
:p (destruct shorterDuration)
:t shorterDuration

-- todo [Floating a] unit for log(x)
